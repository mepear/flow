"""Script containing the base vehicle kernel class."""

from abc import ABCMeta, abstractmethod

# TODO: flow.core.kernel.person.KernelPerson
# 1. add a person to a particular place: done
# 2. route to pickup location: done
# 3. speed control: done
# 4. color: done
# 5. state acquisition: done

class KernelPerson(object, metaclass=ABCMeta): 
    """Flow person kernel.

    This kernel sub-class is used to interact with the simulator with regards
    to all person-dependent components. Specifically, this class contains
    methods for:

    * Interacting with the simulator: This includes routing commands to specific 
      person in the simulator. In addition, methods exist to add or remove a 
      specific person from the network, and update internal state information 
      after every simulation step in order to [support and potentially speed up 
      all state-acquisition methods.]
    * Visually distinguishing person by type: In the case when some persons
      are walking, waiting and en route. The traci simulator, for instance, 
      renders person walking and waiting as yellow, person en route as green.
    * State acquisition: Finally, this methods contains several methods for
      acquiring state information from specific vehicles. For example, if you
      would like to get the speed of a vehicle from the environment, that can
      be done by calling:

        >>> from flow.envs.base import Env
        >>> env = Env(...)
        >>> per_id = "test_person"  # name of the person
        >>> speed = env.k.person.get_speed(per_id)

    All methods in this class are abstract, and must be filled in by the child
    vehicle kernel of separate simulators.
    """

    def __init__(self,
                 master_kernel,
                 sim_params):
        """Instantiate the Flow person kernel.

        Parameters
        ----------
        master_kernel : flow.core.kernel.Kernel
            the higher level kernel (used to call methods from other
            sub-kernels)
        sim_params : flow.core.params.SimParams
            simulation-specific parameters
        """
        self.master_kernel = master_kernel
        self.kernel_api = None
        self.sim_step = sim_params.sim_step

    def pass_api(self, kernel_api):
        """Acquire the kernel api that was generated by the simulation kernel.

        Parameters
        ----------
        kernel_api : any
            an API that may be used to interact with the simulator
        """
        self.kernel_api = kernel_api

    ###########################################################################
    #               Methods for interacting with the simulator                #
    ###########################################################################

    @abstractmethod
    def update(self, reset):
        """Update the person kernel with data from the current time step.

        This method is used to optimize the computational efficiency of
        acquiring person state information from the kernel.

        Parameters
        ----------
        reset : bool
            specifies whether the simulator was reset in the last simulation
            step
        """
        pass

    @abstractmethod
    def add(self, per_id, type_id, edge, pos):
        """Add a person to the network.

        Parameters
        ----------
        per_id : str
            unique identifier of the person to be added
        type_id : str
            person type of the added person
        edge : str
            starting edge of the added person
        pos : float
            starting position of the added person
        """
        pass

    ###########################################################################
    # Methods to visually distinguish persons by {walking/waiting, en route}  #
    ###########################################################################

    @abstractmethod
    def get_color(self, per_id):
        """Return and RGB tuple of the color of the specified person."""
        pass

    @abstractmethod
    def set_color(self, per_id, color):
        """Set the color of the specified person with the RGB tuple."""
        pass

    ###########################################################################
    #                        State acquisition methods                        #
    ###########################################################################

    @abstractmethod
    def get_type(self, per_id):
        """Return the type of the person of per_id."""
        pass

    @abstractmethod
    def get_ids(self):
        """Return the names of all persons currently in the network."""
        pass

    @abstractmethod
    def get_waiting_ids(self):
        """Return the names of all en route persons currently in the network."""
        pass

    @abstractmethod
    def get_driving_ids(self):
        """Return the names of all en route persons currently in the network."""
        pass

    @abstractmethod
    def get_reservations(self):
        """Return all reservations currently in the network."""
        pass

    @abstractmethod
    def get_position(self, per_id):
        """Return the position of the person relative to its current edge.

        Parameters
        ----------
        per_id : str or list of str
            person id, or list of person ids
        error : any, optional
            value that is returned if the person is not found

        Returns
        -------
        float
        """
        pass

    @abstractmethod
    def get_lane(self, per_id):
        """Return the edge the specified person is currently on.

        Parameters
        ----------
        per_id : str or list of str
            person id, or list of person ids
        error : any, optional
            value that is returned if the person is not found

        Returns
        -------
        str
        """
        pass

    ###########################################################################
    #                        Methods for Datapipeline                         #
    ###########################################################################

    @abstractmethod
    def get_2d_position(self, per_id, error=-1001):
        """Return (x, y) position of person with per_id."""
        pass
